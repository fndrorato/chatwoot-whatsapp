services:
  # ==========================================
  # PostgreSQL - Banco de dados compartilhado
  # ==========================================
  postgres:
    image: pgvector/pgvector:pg15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Redis - Cache e filas
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Chatwoot - CRM e Atendimento
  # ==========================================
  
  # Serviço para preparar o banco de dados (roda uma vez)
  chatwoot_prepare:
    image: chatwoot/chatwoot:latest
    container_name: chatwoot_prepare
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${CHATWOOT_DB:-chatwoot_production}
      POSTGRES_USERNAME: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      REDIS_URL: redis://redis:6379
      SECRET_KEY_BASE: ${CHATWOOT_SECRET_KEY_BASE:-replace_with_random_string}
      FRONTEND_URL: ${CHATWOOT_FRONTEND_URL:-http://localhost:3000}
    volumes:
      - chatwoot_data:/app/storage
    networks:
      - app_network
    command: sh -c "bundle exec rails db:chatwoot_prepare && echo 'Database prepared successfully'"

  # Servidor Web do Chatwoot
  chatwoot_web:
    image: chatwoot/chatwoot:latest
    container_name: chatwoot_web
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chatwoot_prepare:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      
      # Configurações de Banco
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${CHATWOOT_DB:-chatwoot_production}
      POSTGRES_USERNAME: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Chatwoot
      SECRET_KEY_BASE: ${CHATWOOT_SECRET_KEY_BASE:-replace_with_random_string}
      FRONTEND_URL: ${CHATWOOT_FRONTEND_URL:-http://localhost:3000}
      FORCE_SSL: ${CHATWOOT_FORCE_SSL:-false}
      
      # Email (Opcional - configure se necessário)
      MAILER_SENDER_EMAIL: ${MAILER_SENDER_EMAIL:-notifications@example.com}
      SMTP_ADDRESS: ${SMTP_ADDRESS:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      
      # Storage (S3/MinIO opcional)
      ACTIVE_STORAGE_SERVICE: ${ACTIVE_STORAGE_SERVICE:-local}
      
      # WhatsApp Cloud API (configure depois)
      WHATSAPP_APP_ID: ${WHATSAPP_APP_ID:-}
      WHATSAPP_CONFIGURATION_ID: ${WHATSAPP_CONFIGURATION_ID:-}
      WHATSAPP_APP_SECRET: ${WHATSAPP_APP_SECRET:-}
      
    volumes:
      - chatwoot_data:/app/storage
    ports:
      - "3000:3000"
    networks:
      - app_network
    command: bundle exec rails server -b 0.0.0.0 -p 3000

  # Worker do Chatwoot (processa jobs em background)
  chatwoot_worker:
    image: chatwoot/chatwoot:latest
    container_name: chatwoot_worker
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chatwoot_prepare:
        condition: service_completed_successfully
    environment:
      NODE_ENV: production
      RAILS_ENV: production
      INSTALLATION_ENV: docker
      
      # Configurações de Banco
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DATABASE: ${CHATWOOT_DB:-chatwoot_production}
      POSTGRES_USERNAME: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Chatwoot
      SECRET_KEY_BASE: ${CHATWOOT_SECRET_KEY_BASE:-replace_with_random_string}
      FRONTEND_URL: ${CHATWOOT_FRONTEND_URL:-http://localhost:3000}
      FORCE_SSL: ${CHATWOOT_FORCE_SSL:-false}
      
      # Email (Opcional)
      MAILER_SENDER_EMAIL: ${MAILER_SENDER_EMAIL:-notifications@example.com}
      SMTP_ADDRESS: ${SMTP_ADDRESS:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      
      # Storage
      ACTIVE_STORAGE_SERVICE: ${ACTIVE_STORAGE_SERVICE:-local}
      
      # WhatsApp Cloud API
      WHATSAPP_APP_ID: ${WHATSAPP_APP_ID:-}
      WHATSAPP_CONFIGURATION_ID: ${WHATSAPP_CONFIGURATION_ID:-}
      WHATSAPP_APP_SECRET: ${WHATSAPP_APP_SECRET:-}
      
    volumes:
      - chatwoot_data:/app/storage
    networks:
      - app_network
    command: bundle exec sidekiq -C config/sidekiq.yml

  # ==========================================
  # N8N - Automação e Fluxos
  # ==========================================
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Banco de dados
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-postgres}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      
      # N8N
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-change_me}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${N8N_WEBHOOK_URL:-http://localhost:5678/}
      GENERIC_TIMEZONE: ${TIMEZONE:-America/Sao_Paulo}
      
      # Execuções
      EXECUTIONS_DATA_SAVE_ON_SUCCESS: all
      EXECUTIONS_DATA_SAVE_ON_ERROR: all
      EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS: true
      
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - app_network

  # ==========================================
  # WAHA - WhatsApp Channels
  # ==========================================
  # waha:
  #   image: devlikeapro/waha-plus:gows-arm
  #   container_name: waha
  #   restart: unless-stopped
  #   environment:
  #     # WAHA Config
  #     WHATSAPP_HOOK_URL: ${WAHA_WEBHOOK_URL:-}
  #     WHATSAPP_HOOK_EVENTS: ${WAHA_WEBHOOK_EVENTS:-message,message.any}
      
  #     # API Protection (recomendado em produção)
  #     WAHA_API_KEY: ${WAHA_API_KEY:-}
      
  #     # Storage (arquivo local por padrão)
  #     WAHA_PRINT_QR: ${WAHA_PRINT_QR:-true}
      
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - waha_data:/app/.sessions
  #   networks:
  #     - app_network

  # ==========================================
  # Traefik - Reverse Proxy (Opcional)
  # Descomente se quiser usar domínios e SSL
  # ==========================================
  # traefik:
  #   image: traefik:v2.10
  #   container_name: traefik
  #   restart: unless-stopped
  #   command:
  #     - "--api.dashboard=true"
  #     - "--providers.docker=true"
  #     - "--providers.docker.exposedbydefault=false"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
  #     - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
  #     - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     - "8080:8080"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - traefik_data:/letsencrypt
  #   networks:
  #     - app_network

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chatwoot_data:
    driver: local
  n8n_data:
    driver: local
  # waha_data:
  #   driver: local
  # traefik_data:
  #   driver: local

# ==========================================
# Networks
# ==========================================
networks:
  app_network:
    driver: bridge